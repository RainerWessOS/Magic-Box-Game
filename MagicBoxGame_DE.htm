<!DOCTYPE html>
<html lang="de">

<head>
  <meta charset="utf-8" />
  <title>Magic Box Game</title>
  <meta name="author" content="Rainer Wess" />
  <meta name="description" content="Magic Box Game realised with JavaScript, HTML5 und CSS" />
  <meta name="keywords" content="Spiel,Logik, Game, Logic, Puzzle, Touch, Handy App, mobile, open source, GPL, freeware, HTML,CSS, JavaScript" />
  <meta name="viewport" content="width=device-width, initial-scale=1, minimal-ui">
 
<style>

  body {
    width: 360px;
    margin: auto;
    color: white;
    font-family: Arial, Tahoma;
    font-size: 16px;
    font-weight: bold;
    background-color: darkgreen;

    /* disabling content selection */
    user-select:none;
  }

  hr {
    margin-top: 20px;
    margin-bottom: 20px;
  }

  a {
    color: Gold;
  }
  
  .game_page {
    position: absolute;
    overflow: hidden;
    top: 0px;
    left: 0px;
    width: 320px;
    margin: 20px;
    color: white;
    background-color: darkgreen;
  }

  .overlay_page {
    z-index: 5;
    position: absolute;
    top: 0px;
    left: 0px;
    width: 320px;
    margin: 20px;
    color: white;
    background-color: darkgreen;
  }
  
 .hidden_page {
    z-index: 5;
    display: none;
  }

  .game_title {
    font: 32px Arial;
    font-weight: bold;
    color: red;
    line-height: 1.2;
    text-align: left;
    text-shadow: -1px 0 white, 0 1px white, 1px 0 white, 0 -1px white;
  }

  .MenuBtn {
    font: 22px Arial;
    font-weight: bold;
    color: DeepSkyBlue;
    font-weight: bold;
    float: right;
    width: 35px;
    height: 35px;
    border: 1px solid;
    border-color: white;
    border-radius: 5px;
    background-color: darkgreen;
  }
  
  #game_stats {
    font: 20px Arial;
    font-weight: bold;
    text-align:center;
    color: white;
    margin-top: 35px;
    margin-bottom: 35px;
  }
  
  span {
    vertical-align: middle;
  }
  
  .level {
    float: left;
    text-align: left;
  }

  #info {
    margin-left: 1px;
   }

  .score {
    float: right;
    text-align: right;
  }

  .tables {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    width: 310px;
    margin-top: 15px;
    margin-left: 2px;
    margin-right: auto;
    margin-bottom: 15px;
  }

  .boxes {
    height: 65px;
    width: 65px;
    font: 48px Arial;
    font-weight: bold;
    color: white;
    text-align: center;
    line-height:1.4;
    background-color: white;
    border-radius: 5px;
    border: 1px solid;
    border-color: white;
    -webkit-box-shadow: 3px 3px 3px #303030;
    -moz-box-shadow: 3px 3px 3px #303030;
    box-shadow: 3px 3px 3px #303030;
  }

  #controls {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    margin-top: 50px;
    margin-bottom: 3px;
    margin-right: 3px;
  }

  .btn {
    font: 16px Arial;
    font-weight: bold;
    color: white;
    font-weight: bold;
    border-color: white;
    border: 1px solid;
    border-radius: 5px;
    -webkit-box-shadow: 3px 3px #303030;
    -moz-box-shadow: 3px 3px #303030;
    box-shadow: 3px 3px #303030;
    height: 35px;
  }
  
  #newTryBtn {
    background-color: green;
    height: 55px;
    width: 90px;
  }

  #hintBtn {
    background-color: red;
    height: 55px;
    width: 90px;
  }

  #newGameBtn {
    background-color: black;
    height: 55px;
    width: 90px;
  }

  #menu {
    overflow: hidden;
  }
  
  .redBtn {
    background-color: red;
  }

  label {
    font: 18px Arial;
    font-weight: bold;
  }
  
  #select_lvl {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
  }
  
 #lvl {
     margin-top: 3px; 
     text-align:left;
  }
  
 #f1 {
     margin-top: 20px; 
     height:25px;
  }

  #playBtn {
      margin-left: 10px; 
      margin-right: 5px; 
  }

  .menu_info {
    margin-top: 15px;
    width: 100%;
  }

  h3 {
    font: 20px Arial;
    font-weight: bold;
  }

  .content {
    font: 16px Arial;
    font-weight: bold;
    margin-top: 30px;
    margin-bottom: 10px;
    height: 100%;
  }
  
  input[type=radio] { 
     -moz-appearance: None; 
     -webkit-appearance: none; 
      background: transparent; 
      border: 1px solid white;
      border-radius: 5px;
      width: 25px;
      height: 25px;
      vertical-align: middle;
  } 
  
  input[type=radio]:checked { 
     background: Red; 
  }

  input[type=range] {
    -webkit-appearance: none;
    width: 150px;
    margin: 0;
    margin-top: 12px; 
    margin-bottom:5px;
    vertical-align: middle; 
    border: 0;
    background: transparent;
  }

  input[type=range]:focus {
    outline: none;
  }

  input[type=range]::-webkit-slider-thumb {
    -webkit-appearance: none;
    margin-top: -11px;
    border: 1px solid white;
    border-radius: 5px;
    box-shadow: 3px 3px #303030;
    width: 30px;
    height: 30px;
    cursor: pointer;
    background: red;
  }

  input[type=range]::-webkit-slider-runnable-track {
    height: 8px;
    background: green;
    cursor: pointer;
  }

  input[type=range]::-moz-range-thumb {
    border: 1px solid white;
    border-radius: 5px;
    box-shadow: 3px 3px #303030;
    width: 30px;
    height: 30px;
    cursor: pointer;
    background: red;
  }

  input[type=range]::-moz-range-track {
    height: 8px;
    background: green;
    cursor: pointer;
  }

  input[type=range]::-ms-thumb {
    border: 1px solid white;
    border-radius: 5px;
    box-shadow: 3px 3px #303030;
    width: 30px;
    height: 30px;
    cursor: pointer;
    background: red;
  }

</style>

<script>

  /*
       Magic Box Game  V0.85
       Copyright Rainer Wess 2018
       Made in Germany üá©üá™
       
       Open Source / Freeware
       Released under GNU GPL 3.0
       You can download it from
       github, search RainerWessOS
       
       New in version 0.86: 
       added imageBox feature, selectable
       in menu page
       changed emoticons to HTML encoded
       UTF-8 symbols, you may have a look at 
       https://www.utf8icons.com/
       a few litlle improvements and fixed
       some translation errors
   */

  globals: {

    var debug = false;

    var score = 0;
    var level = 0;
    var num;
    var num_boxes;
    var magic_box = 0;
    var box = [];
    var inv;
    var ani = false;
    var ready = false;
    var withImages=false;
    
            //used in function colorBox
    var colors = ["Gold", "DarkOrange", "Green", "HotPink", "DeepSkyBlue", "Olive", "Salmon", "DarkOrchid", "SlateBlue", "OrangeRed", "DarkCyan", "SlateGray"];
            //used in function imageBox
    var images = ["&#128154;", "&#128674;", "&#128661;", "&#127934;", "&#127805;", "&#128013;", "&#128081;", "&#127774;", "&#127796;", "&#128039;", "&#128036;", "&#9748;"];
    // old images = ["üíö", "üö¢", "üöï", "üéæ", "üåΩÔ∏è", "üêç", "üëë", "üåû", "üå¥", "üêß", "üê§", "‚òî"];
            //used in function hint
    var names = ["Herz", "Schiff", "Taxi", "Tennis", "Mais", "Schlange", "Krone", "Sonne", "Palme", "Pinguin", "Vogel", "Regen"];
  }
  
  
  // useful little helper functions

  function id(id) {
    return document.getElementById(id);
  }

  function hide(hid) {
    id(hid).style.visibility = "hidden";
  }

  function show(sid) {
    id(sid).style.visibility = "visible";
  }

  function getVis(vid) {
    return id(vid).style.visibility;
  }

  function setText(sid, txt) {
    id(sid).innerHTML = txt;
  }

  function aniWin() {
    ani = (ani) ? false : true;
    if (ani) setColor("info", "darkgreen");
    else setColor("info", "gold");
  }

  function setColor(sid, color) {
    id(sid).style.color = color;
  }

  function setBgColor(sid, color) {
    id(sid).style.backgroundColor = color;
  }

  function colorBox(num) {
    setText(num, num);
    setBgColor(num, colors[num]);
  }

  function imageBox(num) {
    setBgColor(num, "white");
    setText(num, images[num]);
  }

  function randNum(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }
  
  function showMenu() {
 id("menu").className="overlay_page";
 id("guide").className="hidden_page";
 id("about").className="hidden_page";
  }

  function showGuide() { 
id("guide").className="overlay_page";
id("menu").className="hidden_page";
  }

  function showAbout() {
id("about").className="overlay_page";
id("menu").className="hidden_page";
  }

 function showGame() {
  id("game").className="game_page";
  id("menu").className="hidden_page";
 }
 
 function disableButtons() {
   id("newTryBtn").disabled=true;
   id("hintBtn").disabled=true;
}

function enableButtons() {
	id("newTryBtn").disabled = false;
    id("hintBtn").disabled = false;
}

 
 function init() {
   
     disableButtons();
     
     withImages = id("withImages").checked ? true : false;
	
	 for (var i=0; i<12; i++) {
		 withImages==true ?  imageBox(i) : colorBox(i);
         show(i);
    }
}


function startSelectedGame() {

  ready = false; 

  showGame();
  init();
  
  level = id("level_selector").value;
  setText("level", level);
  level--;
 
  newGame();

}


  function backToBeginning() {

     id("newTryBtn").blur();

    for (var i=0; i<num_boxes; i++) {
       show(i);
     }
  }


  function hint() {

    id("hintBtn").blur();
    
    if(withImages) {
       alert("Ein kleiner Tipp um das Spiel einfacher zu machen. \n\nDie magische Box ist das Bild: " + names[magic_box] );
    }
    else alert("Ein kleiner Tipp um das Spiel einfacher zu machen. \n\nDie magische Box ist Nummer: " + magic_box );
  }
  
  
  function howManyBoxes() {

    var nb;

    if (level < 3) {
      nb = 3;
    }
    else if (level < 5) {
      nb = 4;
    }
    else if (level < 8) {
      nb = randNum(4, 5);
    }
    else if (level < 12) {
      nb = randNum(5, 6);
    }
    else if (level < 16) {
      nb = randNum(6, 7);
    }
    else if (level < 21) {
      nb = randNum(7, 8);
    }
    else if (level < 27) {
      nb = randNum(8, 9);
    }
    else if (level < 35) {
      nb = randNum(8, 10);
    }
    else if (level < 42) {
      nb = randNum(9, 11);
    }
    else {
      nb = randNum(9, 12);
    }

    return nb;
  }


  function createPath() {

    var a, i;
    var index = 0;
    var item = 0;
    var in_arr = [];
    var out_arr = [];

    for (i=0; i<num_boxes; i++) {
      in_arr[i] = i;
      out_arr[i] = num_boxes;
    }

    for (i=0; i<num_boxes; i++) {
      do {
        item =randNum(0,num_boxes-1);
      }
      while (item == index || out_arr.indexOf(item) !== -1)

      out_arr[index] = item;
      index = item;
      
    }

    if (debug) {
      console.log("After Pathcreation:");
      console.log(out_arr);
    }

    /*
     if Array to short, add impossibe 
     value, will be corrected in next 
     step; but dont ask me why the 
     array is in rare cases to short 
     or is missing values, if you 
     know please write a comment!
    */
    
    while(out_arr.length<num_boxes) {
      out_arr.push(num_boxes);
    }

    // the missing numbers are put 
    // in the right places
    in_arr.forEach(function(item,i) {
      if(out_arr.indexOf(item)==-1) {
        a=out_arr.indexOf(num_boxes);
        out_arr[a] = item;
      }
    });


    if (debug) {
      console.log("After Error-corection:");
      console.log(out_arr);
    }

    /* 
      we dont need this, but for 
      3 boxes hardcoded randomness
      is slightly better then random
      randomness(only 2 possibilitys)
    */
    if (level == 1) {
      out_arr = [1, 2, 0];
    }
    if (level == 2) {
      out_arr = [2, 0, 1];
    }

    return out_arr;
  }

  function createMagicBox() {

    var i;
    var mb; // in random position

    mb = randNum(0, num_boxes - 1);

    // if a box closes itself, it 
    // will not become a magic_box

    for (i = 0; i < num_boxes; i++) {
      if (box[i] == i) {
        if (mb == i) {
          mb++;
          if (mb >= num_boxes) {
            mb = 0;
          }
        }
        break;
      }
    }
    
    return mb;

  }


  function showDifficulty() {

    var i;
    var diffy = false;

    setColor("info", "white");
    
    if (num_boxes > 9) {
      setText("info", "Schwer")
    }
    else if (num_boxes > 6) {
      setText("info", "Mittel")
    }
    else {
      setText("info", "Einfach")
    }

  }

  function hit(nr) {

    var i, j;
    var count = 0;

    if (ready) {

      // usual box
      hide(box[nr]);
      
      // magic box
      if (nr == magic_box) {
        hide(magic_box);
      }

      checkWin();
    }
  }

  function checkWin() {

    var win = true;

    for(var i=0; i<box.length; i++) {
      if (getVis(i) == "visible") {
        win = false;
        break;
      }
    }
    if (win) {
      score += num_boxes;
      setColor("info", "gold");
      setText("info", "Gewonnen!");
      setText("score", score);
      disableButtons();
      id("newGameBtn").disabled=false;
      inv = setInterval(aniWin, 700);

    }
  }

  function newGame() {

    var i;

    ready = false;
    win = false;

    if (inv) clearInterval(inv);
    
    level++;
    
    id("newGameBtn").blur();
    setText("newGameBtn", "N&auml;chstes Level");
    id("newGameBtn").disabled = true;
    enableButtons();
    setText("info", " ");
    setText("level", level);
    
    for (i = 0; i < 12; i++) {
      hide(i);
    }
    
    num_boxes = howManyBoxes();
    
    box = createPath();

    magic_box = createMagicBox();

    for (var i=0; i<num_boxes; i++) {
      show(i);
    }

    showDifficulty();

    ready = true;

    if (debug) {
      setText("info", "M-Box : " + magic_box);
      console.log("The Boxarray:");
      console.log(box);
    }

  }

  // END

</script>

</head>

<body onload="init()">

  <div id="menu" class="hidden_page">
    <div class="header"><span class="game_title">Magic Box Game</span><button id="mBtn" class="MenuBtn" onclick="showGame()">&#10005;</button></div>
    <hr>
    <div>
      <button id="guideBtn" class="btn redBtn" onclick="showGuide()">Spielanleitung</button>
    </div>
    <div class="menu_info">
      Die Regeln und wissenswertes um die Level zu l&ouml;sen.
      <p>
    </div>
    <hr>
    <div>
      <label>W&auml;hle ein Level:</label>
      <div id="select_lvl">
          <input type="range" id="level_selector" value="1" min="1" max="31" step="5" list="datalist1" onchange="lvl.value = 'Level : ' + level_selector.value;">
          <output id="lvl" for="level_selector">Level: 1</output>
    <datalist id="datalist1">     
       <option>1</option>
       <option>6</option>                                                             
       <option>11</option>
       <option>16</option>
       <option>21</option>
       <option>26</option>
       <option>31</option>
   </datalist>
          <button id="playBtn" class="btn redBtn" onclick="startSelectedGame()">SPIELEN</button>
      </div>
    </div>
      <div id="f1">
      <form name="form1">
      <input type="radio" name="wImg" checked> mit Zahlen &nbsp; 
      <input type="radio"  name="wImg" id="withImages"> mit Bildern<br>
      </form>
      </div>
    <div class="menu_info">
      Falls du das Spiel noch nie gespielt hast klick einfach auf "SPIELEN" (Level 1).
      <p>

    </div>
    <hr>
    <div>
      <button id="aboutBtn" class="btn redBtn" onclick="showAbout()">&Uuml;ber das Spiel</button>
    </div>
    <div class="menu_info">
      Informationen &uuml;ber Urheber, Copyright und Lizenz f&uuml;r dieses Spiel.
    </div>
  </div>

  <div id="guide" class="hidden_page">
    <div class="header"><span class="game_title">Magic Box Game</span><button class="MenuBtn" onclick="showMenu()">&#9776;</button></div>
    
    <div class="content">
      <h3>Spielanleitung</h3>
Magic Box ist eine Kombination aus Logikspiel und Memory. Was ben&ouml;tigt wird, ist ein klarer Geist und eine gutes Ged&auml;chnis.
      <P> Ziel des Spiels ist es zu gewinnen. üòÄ <br> Um dieses Ziel zu erreichen, musst du alle Boxen verschwinden lassen. Das klingt einfacher als es ist. Hier sind die Regeln:
        <p> Jede Box, auf die du klickst, l&auml;sst eine Box verschwinden.
          <P> Es gibt eine magische Box, die nicht nur eine andere Box, sondern auch sich selbst verschwinden l&auml;sst.
              <p>
                Um alle Boxen verschwinden zu lassen, m&uuml;ssen sie in der richtigen Reihenfolge angeklickt werden. Deine Aufgabe ist es nun, diese Reihenfolge durch Anklicken der Boxen herauszufinden. Wenn du die K&auml;stchen in der falschen Reihenfolge anklickst, bleiben einige K&auml;stchen &uuml;brig und das Spiel ist nicht l&ouml;sbar, was kein Problem ist, denn der "Neuer Versuch" -Knopf bringt dich zur&uuml;ck zum Anfang des Levels und dann kannst du es erneut versuchen.
                <p> Viel Spa√ü beim Puzzeln!
                  <p> Hinweis: Ich habe viel Zufall in das Spiel einprogrammiert. Jedes Mal, wenn du es spielst, sind die Level unterschiedlich. Unbegrenzt viele Level!
                      <p>
    </div>
  </div>

  <div id="about" class="hidden_page">
    <div class="header"><span class="game_title">Magic Box Game</span><button class="MenuBtn" onclick="showMenu()">&#9776;</button>
    </div>

    <div class="content">
      <h3>&Uuml;ber das Spiel</h3>
      Spielentwicklung/Programmierung<br> 2018 ¬©Ô∏è Rainer Wess, Osnabr&uuml;ck
      <p>
      Made in Germany üá©üá™
          <p>
            Dieses Spiel ist Open Source / Freeware.
            <p>
              Dieses Programm ist freie Software: Du kannst sie  nutzen, weiterverbreiten oder modifizieren nach den Bedingungen der GNU General Public  License, wie sie von der Free Software Foundation ver&ouml;ffentlicht wurde, entweder Version 3 der Lizenz, oder (nach deinem Ermessen) jeder sp&auml;teren Version.
              <p>
Dieses Programm wird in der Hoffnung verbreitet, dass es n&uuml;tzlich sein wird, aber OHNE JEGLICHE GARANTIE; ohne auch nur die stillschweigende Gew&auml;hrleistung der MARKTG&Auml;NGIGKEIT oder EIGNUNG F&Uuml;R EINEN BESTIMMTEN ZWECK. Weitere Informationen findest du in der GNU General Public License.
                <p>
                  Du solltest eine Kopie der GNU General Public License zusammen mit diesem Programm erhalten haben.
                  <p>
                    Falls nicht, schau hier: <br><a href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>
         <p>
            Die aktuellste Version des Spiels kannst du von github.com herunterladen:<br>
<a href="https://github.com/RainerWessOS/">https://github.com/RainerWessOS/</a>
            <p>
    </div>
  </div>

  <div id="game" class="game_page">
    <div class="header"><span class="game_title">Magic Box Game</span><button class="MenuBtn" onclick="showMenu()">&#9776;</button>
    </div>

    <div id="game_stats">
      <span class="level">Level :&nbsp;</span>
      <span class="level" id="level">0</span>
      <span id="info">&nbsp;</span>
            <span class="score" id="score">0</span>
      <span class="score">Punkte :&nbsp;</span>

    </div>

    <div class="tables">
      <div id="8" class="boxes" onclick="hit(8)">8</div>
      <div id="2" class="boxes" onclick="hit(2)">2</div>
      <div id="3" class="boxes" onclick="hit(3)">3</div>
      <div id="10" class="boxes" onclick="hit(10)">10</div>
    </div>

    <div class="tables">
      <div id="6" class="boxes" onclick="hit(6)">6</div>
      <div id="0" class="boxes" onclick="hit(0)">0</div>
      <div id="1" class="boxes" onclick="hit(1)">1</div>
      <div id="7" class="boxes" onclick="hit(7)">7</div>
    </div>

    <div class="tables">
      <div id="9" class="boxes" onclick="hit(9)">9</div>
      <div id="4" class="boxes" onclick="hit(4)">4</div>
      <div id="5" class="boxes" onclick="hit(5)">5</div>
      <div id="11" class="boxes" onclick="hit(11)">11</div>
    </div>

    <div id="controls">
      <div>
        <button id="newTryBtn" class="btn" onclick="backToBeginning()">Neuer Versuch</button>
      </div>
      <div>
        <button id="hintBtn" class="btn" onclick="hint()">Brauche Tipp</button>
      </div>
      <div>
        <button id="newGameBtn" class="btn" onclick="newGame()">Spiel starten</button>
      </div>
    </div>
  </div>

  </body>

</html>
