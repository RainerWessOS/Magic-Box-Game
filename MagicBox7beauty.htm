<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <title>Magic Box Game</title>
  <meta name="author" content="Rainer Wess" />
  <meta name="description" content="Magic Box Game realised with JavaScript, HTML5 und CSS" />
  <meta name="keywords" content="Spiel,Logik, Game, Logic, Puzzle, Touch, Handy App, mobile, open source, GPL, freeware, HTML,CSS, JavaScript" />

  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no, minimal-ui">

  <style>

  /* 
   I have reduced the margins-height     
   of some elements to look nicer on    
   the Sololearn mobile App. To play 
   it standlone you may stretch it a 
   little bit in Y-direction.
*/

  body {
    width: 360px;
    margin: auto;
    color: white;
    font-family: Arial, Tahoma;
    font-size: 16px;
    font-weight: bold;
    background-color: darkgreen;

    /* disabling content selection */
    user-select: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -khtml-user-select: none;
    -ms-user-select: none;
  }

  hr {
    margin-top: 20px;
    margin-bottom: 20px;
  }

  a {
    color: Gold;
  }

  #menu {
    overflow: hidden;
  }

  .game_page {
    position: absolute;
    overflow: hidden;
    top: 0px;
    left: 0px;
    width: 320px;
    margin: 20px;
    color: white;
    background-color: darkgreen;
  }

  .hidden_page {
    z-index: 5;
    display: none;
  }

  .overlay_page {
    z-index: 5;
    position: absolute;
    top: 0px;
    left: 0px;
    width: 320px;
    margin: 20px;
    color: white;
    background-color: darkgreen;
  }

  .game_title {
    font: 32px Arial;
    font-weight: bold;
    color: red;
    text-align: left;
    text-shadow: -1px 0 white, 0 1px white, 1px 0 white, 0 -1px white;
  }

  .MenuBtn {
    font: 22px Arial;
    font-weight: bold;
    color: DeepSkyBlue;
    font-weight: bold;
    float: right;
    width: 35px;
    height: 35px;
    border: 1px solid;
    border-color: white;
    border-radius: 5px;
    background-color: darkgreen;
  }

  #game_stats {
    font: 20px Arial;
    font-weight: bold;
    color: white;
    margin-top: 30px;
  }

  #level {
    float: left;
    text-align: left;
    margin-bottom: 30px;
  }

  #info {
    color: gold;
    text-align: center;
    margin-left: 40px;
  }

  #score {
    float: right;
    text-align: right;
  }

  .tables {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    width: 310px;
    margin-top: 15px;
    margin-left: 2px;
    margin-right: auto;
    margin-bottom: 15px;
  }

  span {
    vertical-align: middle;
  }

  .boxes {
    height: 65px;
    width: 65px;
    font: 48px Arial;
    font-weight: bold;
    color: white;
    text-align: center;
    vertical-align: middle;
    background-color: white;
    border-radius: 5px;
    border: 1px solid;
    border-color: white;
    -webkit-box-shadow: 3px 3px 3px #303030;
    -moz-box-shadow: 3px 3px 3px #303030;
    box-shadow: 3px 3px 3px #303030;
  }

  #controls {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    margin-top: 40px;
    margin-bottom: 3px;
    margin-right: 3px;
  }

  .btn {
    font: 16px Arial;
    font-weight: bold;
    color: white;
    font-weight: bold;
    border-color: white;
    border-radius: 5px;
    -webkit-box-shadow: 3px 3px #303030;
    -moz-box-shadow: 3px 3px #303030;
    box-shadow: 3px 3px #303030;
    height: 35px;
  }

  .redBtn {
    background-color: red;
  }

  label {
    font: 18px Arial;
    font-weight: bold;
  }

  #playBtn {
    margin-left: 20px;
  }

  .menu_info {
    margin-top: 15px;
    width: 100%;
  }

  #select_lvl {
    margin-top: 10px;
  }

  #newTryBtn {
    background-color: green;
  }

  #hintBtn {
    background-color: red;
  }

  #newGameBtn {
    background-color: black;
  }

  h3 {
    font: 20px Arial;
    font-weight: bold;
  }

  .page_content {
    font: 16px Arial;
    font-weight: bold;
    margin-top: 30px;
    margin-bottom: 10px;
    height: 100%;
  }

  input[type=range] {
    -webkit-appearance: none;
    width: 150px;
    margin: 0;
    margin-right: 10px;
    vertical-align: middle;
    border: 0;
    background: transparent;
  }

  input[type=range]:focus {
    outline: none;
  }

  input[type=range]::-webkit-slider-thumb {
    -webkit-appearance: none;
    margin-top: -11px;
    border: 1px solid white;
    border-radius: 5px;
    box-shadow: 3px 3px #303030;
    width: 30px;
    height: 30px;
    cursor: pointer;
    background: red;
  }

  input[type=range]::-webkit-slider-runnable-track {
    height: 8px;
    background: green;
    cursor: pointer;
  }

  input[type=range]::-moz-range-thumb {
    border: 1px solid white;
    border-radius: 5px;
    box-shadow: 3px 3px #303030;
    width: 30px;
    height: 30px;
    cursor: pointer;
    background: red;
  }

  input[type=range]::-moz-range-track {
    height: 8px;
    background: green;
    cursor: pointer;
  }

  input[type=range]::-ms-thumb {
    border: 1px solid white;
    border-radius: 5px;
    box-shadow: 3px 3px #303030;
    width: 30px;
    height: 30px;
    cursor: pointer;
    background: red;
  }

  </style>
  <script>
     
  /*
       Magic Box Game  V0.85
       Copyright Rainer Wess 2018
       Made in Germany üá©üá™
       
       Open Source / Freeware
       Released under GNU GPL 3.0
       You can download it from
       github, search RainerWessOS
     */

  globals: {

    var debug = false;

    var score = 0;
    var level = 0;
    var start_level = 0;
    var num;
    var num_boxes;
    var magic_box = 0;
    var box = [];
    var tricky = false;
    var numbers = [];
    var colors = [];
    var images = [];
    var inv;
    var ani = false;
    var ready = false;
    var win = false;

  }

  // the following arrays  
  // are for future additions

  numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];

  colors = ["Gold", "DarkOrange", "Green", "HotPink", "DeepSkyBlue", "Olive", "Salmon", "DarkOrchid", "SlateBlue", "OrangeRed", "DarkCyan", "SlateGray"];

  images = ["üíö", "üö¢", "üöï", "üéæ", "üåΩÔ∏è", "üêç", "üëë", "üåû", "üå¥", "üêß", "üê§", "‚òî"];
  names = ["heart", "ship", "car", "tennis", "corn", "snake", "crown", "sun", "tree", "pinguin", "bird", "rain"];

  function id(id) {
    return document.getElementById(id);
  }

  function hideD(hid) {
    id(hid).style.display = "none";
  }

  function showD(sid) {
    id(sid).style.display = "block";
  }

  function hide(hid) {
    id(hid).style.visibility = "hidden";
  }

  function moveHide(nr) {
    /* not in use */
    num = nr;
    setBgColor(num, "#999999");
    setTimeout("hide(num);", 1000);
  }

  function show(sid) {
    id(sid).style.visibility = "visible";
  }

  function getVis(vid) {
    return id(vid).style.visibility;
  }

  function setText(sid, txt) {
    id(sid).innerHTML = txt;
  }

  function aniWin() {
    ani = (ani) ? false : true;
    if (ani) setColor("info", "darkgreen");
    else setColor("info", "gold");
  }

  function setColor(sid, color) {
    id(sid).style.color = color;
  }

  function setBgColor(sid, color) {
    id(sid).style.backgroundColor = color;
  }

  function colorBox(num) {
    setText(num, num);
    setBgColor(num, colors[num]);
  }

  function imageBox(num) {
    setBgColor(num, "white");
    setText(num, images[num]);
  }

  function randNum(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }

function startGame(lvl) {
	    showGame();
	    level = lvl;
	    setText("level", "Level : "+level);
	    setTimeout(newGame,50);
}

  function init() {

     level = 0;
     score = 0;
     setText("level", "Level : " + level);
     setText("score", "Score : " + score);
    num_boxes = howManyBoxes();

    for (var i = 0; i < 12; i++) {
      colorBox(i);
      // imageBox(i);
      show(i);
    }
  }

  function backToBeginning() {

    id("newTryBtn").blur();

    for (var i = 0; i < num_boxes; i++) {
      show(i);
    }
  }

  function hint() {

    id("hintBtn").blur();

    alert("A little hint to make it a little bit easier. \n\nThe magic box is Number: " + magic_box + "\n\nFor instructions how to play the game click the question mark in the upper right corner.");
  }

  function howManyBoxes() {

    var nb;

    if (level < 3) {
      nb = 3;
    }
    else if (level < 6) {
      nb = 4;
    }
    else if (level < 10) {
      nb = randNum(4, 5);
    }
    else if (level < 15) {
      nb = randNum(5, 6);
    }
    else if (level < 20) {
      nb = randNum(6, 7);
    }
    else if (level < 25) {
      nb = randNum(7, 8);
    }
    else if (level < 30) {
      nb = randNum(8, 9);
    }
    else if (level < 35) {
      nb = randNum(8, 10);
    }
    else if (level < 42) {
      nb = randNum(9, 11);
    }
    else {
      nb = randNum(9, 12);
    }

    return nb;
  }

  function createPath() {

    var a, i;
    var index = 0;
    var item = 0;
    var in_arr = [];
    var out_arr = [];

    for (i = 0; i < num_boxes; i++) {
      in_arr[i] = i;
      out_arr[i] = num_boxes;
    }

    index = randNum(0, num_boxes - 1);

    for (i = 0; i < num_boxes; i++) {
      do {
        item = randNum(0, num_boxes - 1);
      }
      while (item == index || out_arr.indexOf(item) !== -1)

      out_arr[index] = item;
      index = item;
    }

    if (debug) {
      console.log("After Pathcreation:");
      console.log(out_arr);
    }

    /*
 
     if Array to short, add impossibe 
     value, will be corrected in next 
     step; but dont ask me why the array
     is in rare cases to short or is 
     missing values, 
     if you know please write a comment!
     
    */
    while (out_arr.length < num_boxes) {
      out_arr.push(num_boxes);
    }

    // the missing numbers are put 
    // in the right places
    in_arr.forEach(function(item, i) {
      if (out_arr.indexOf(item) == -1) {
        a = out_arr.indexOf(num_boxes);
        out_arr[a] = item;
      }
    });

    /* 
      we dont need this, but for 
      3 boxes hardcoded randomness
      is slightly better then random
      randomness(only 2 possibilitys)
    */
    if (level == 1) {
      out_arr = [1, 2, 0];
    }
    if (level == 2) {
      out_arr = [2, 0, 1];
    }

    return out_arr;

  }

  function createMagicBox() {

    var i;
    var mb; // in random position

    mb = randNum(0, num_boxes - 1);

    // if a box closes itself, it 
    // will not become a magic_box

    for (i = 0; i < num_boxes; i++) {
      if (box[i] == i) {
        if (mb == i) {
          mb++;
          if (mb >= num_boxes) {
            mb = 0;
          }
        }
        break;
      }
    }
    return mb;

  }

  function generateLevel() {

    var i;
    var count = 0;
    var diffy = false;
    var tmp_arr = [];

    if (tricky) {
      do {

        tmp_arr = createPath();

        // Games with fake magic boxes
        // are tricky to solve
        // this uses a flaw in the algo
        // it shouldnt give selfclosing boxes
        for (i = 0; i < tmp_arr.length; i++) {
          if (box[i] == i) {
            diffy = true;
            break;
          }
        }
        // if nothing found, give up
        count++;
      }
      while (!diffy && count < 99)

    }
    else {

      do {

        tmp_arr = createPath();

        // Here we only want the easy
        // beginner level
        for (i = 0; i < tmp_arr.length; i++) {
          if (box[i] == i) {
            diffy = true;
            break;
          }
        }
        count++;
      }
      while (diffy && count < 5)

    }

    return tmp_arr;
  }

  function showDifficulty() {

    var i;
    var diffy = false;

    setColor("info", "white");

    // Games with fake magic boxes are
    // tricky to solve
    for (i = 0; i < box.length; i++) {
      if (box[i] == i && i !== magic_box) {
        diffy = true;
        break;
      }
    }

    if (num_boxes > 8 && diffy) {
      setText("info", "Hard")
    }
    else if (num_boxes > 4 && diffy) {
      setText("info", "Medium")
    }
    else if (num_boxes > 10) {
      setText("info", "Hard")
    }
    else if (num_boxes > 7) {
      setText("info", "Medium")
    }
    else {
      setText("info", "Easy")
    }

  }

  function hit(nr) {

    var i, j;
    var count = 0;

    if (ready) {

      // usual box
      hide(box[nr]);

      // a box that only closes itself 
      // we make it a fake magic box 

      if (box[nr] == nr && nr !== magic_box) {
        for (i = 0; i < box.length; i++) {
          if (getVis(i) == "visible") {
            hide(box[i]);
            break;
          }
        }
      }

      // magic box
      if (nr == magic_box) {
        hide(magic_box);

        /*
           this makes the game more
           tolerant to failures that
           may occur in the path creation
        */

        for (j = 0; j < box.length; j++) {
          if (getVis(j) == "visible") {
            count++;
          }
        }
        if (count == 1) hide(j);

      }

      checkWin();
    }
  }

  function checkWin() {

    var win = true;

    for (var i = 0; i < box.length; i++) {
      if (getVis(i) == "visible") {
        win = false;
        break;
      }
    }
    if (win) {
      score += num_boxes;
      setColor("info", "gold");
      setText("info", "You Win!");
      setText("score", "Score : " + score);
      id("newTryBtn").disabled = true;
      id("newGameBtn").disabled = false;
      inv = setInterval(aniWin, 700);

    }
  }

  function newGame() {

    var i;

    ready = false;
    win = false;

    if (inv) clearInterval(inv);

    level++;

    if (level < start_level) {
      level = start_level;
    }

    id("newGameBtn").blur();
    setText("newGameBtn", "Next Level");
    id("newGameBtn").disabled = true;
    id("newTryBtn").disabled = false;
    setText("info", " ");
    setText("level", "Level : " + level);

    num_boxes = howManyBoxes();

    for (i = 0; i < 12; i++) {
      hide(i);
    }

    // easy levels
    if (level < 8) {
      tricky = false;
    }
    // try to create levels with
    // fake magic boxes
    else {
      tricky = true;
    }

    box = generateLevel();

    magic_box = createMagicBox();

    for (var i = 0; i < num_boxes; i++) {
      show(i);
    }

    showDifficulty();

    ready = true;

    if (debug) {
      setText("info", "M-Box : " + magic_box);
      console.log("The Boxarray:");
      console.log(box);
    }

  }

  function pathValidator() {

    /*
      Done:
       Increased Difficulty from level 8
       upwards
      
      ToDo
      1) Magic Box Array, to insert 
         additionaly (fake) magic_boxes
         to increase difficulty
      2) path validator, to know where
      3) autoSolver, if its to difficult
         for you it can show you that the       
         level is solveable
      4) randomise numbers of the boxes
         in the playfield
      5) Mix Levels with images and 
         without numbers 
    */

  }

  // END

  </script>

</head>

<body>

  <div id="menu" class="hidden_page">
    <div class="header"><span class="game_title">Magic Box Game</span><button class="MenuBtn" onclick="showGame();">&#10005;</button></div>
    <hr>
    <div>
      <button id="guideBtn" class="btn redBtn" onclick="showGuide();">How to play</button>
    </div>
    <div class="menu_info">
      The rules and what you need to know to solve the levels.
      <p>
    </div>
    <hr>
    <div>
      <label>Select Starting Level: (not working yet</label>
      <div id="select_lvl">
        <form oninput="lvl.value =  'Level : ' + level_selector.value;">
          <input type="range" id="level_selector" value="1" min="1" max="31" step="10" list="datalist1">
          <output id="lvl" for="level_selector">Level: 1</output>
          <datalist id="datalist1">
                                <option>1</option>
                                <option>11</option>
                                <option>21</option>
                                <option>31</option>
                            </datalist>
          <button id="playBtn" class="btn redBtn" onclick="    setTimeout('startGame(21);',50);">PLAY</button>
        </form>
      </div>
    </div>
    <div class="menu_info">
      If you have never played this game before just click "PLAY" to start with Level 1.
      <p>
    </div>
    <hr>
    <div>
      <button id="aboutBtn" class="btn redBtn" onclick="showAbout();">About the Game</button>
    </div>
    <div class="menu_info">
      Information about author, licence and copyright for this game.
    </div>
  </div>

  <div id="guide" class="hidden_page">
    <div class="header"><span class="game_title">Magic Box Game</span><button class="MenuBtn" onclick="showMenu();">&#9776;</button></div>
    
    <div class="page_content">
      <h3>Instructions</h3>Magic Box is a combination of logic game and memory. What is needed is a clear mind and a good memory.
      <P> The goal of the game is to win. üòÄ <br> To reach this goal you have to make all boxes disappear. That sounds easier than it is. Here are the rules:
        <p> Every box you click on will make another box disappear.
          <P> There is a magic box that can not only make another box but also itself disappear.
            <P> But beware, there may be fake magic boxes to confuse you and increase the fun! Not everything, what seems to to be a magic box, leads you to the victory!
              <p>
                To make all boxes disapear they have to be clicked in the correct order. Your task is now to find out this order by clicking on the boxes and worrying. If you click the boxes in the wrong order boxes are left and the game is not solvable, which is not a problem, because the "New try" button will take you back to the beginning of the level and then you can try again.
                <p> Have fun puzzle!
                  <p> Note: Coded a lot of randomness into the game. So everytime you play it the levels are different. Unlimited levels!
                    <p>&nbsp;
                      <p>
    </div>
  </div>

  <div id="about" class="hidden_page">
    <div class="header"><span class="game_title">Magic Box Game</span><button class="MenuBtn" onclick="showMenu()">&#9776;</button>
    </div>

    <div class="page_content">
      <h3>About the Game</h3>
      Game-Development / Programming:<br> ¬©Ô∏è Rainer Wess - 2018
      <p>
        Made in Germany üá©üá™
        <p>
          <p>
            This game is open source / freeware it has been released under the GNU GENERAL PUBLIC LICENSE 3.0 from the Free Software Foundation.
            <p>
              This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
              <p>
                This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
                <p>
                  You should have received a copy of the GNU General Public License along with this program.
                  <p>
                    If not, see <a href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>
                    &nbsp;
                    <p>
                      &nbsp;
                      <p>
    </div>
  </div>

  <div id="game" class="game_page">
    <div class="header"><span class="game_title">Magic Box Game</span><button class="MenuBtn" onclick="showMenu()">&#9776;</button>
    </div>

    <div id="game_stats">
      <span id="level">Level : 0</span>
      <span id="info"></span>
      <span id="score">Score : 0</span>
    </div>

    <div class="tables">
      <div id="8" class="boxes" onclick="hit(8)"><span>8</span></div>
      <div id="2" class="boxes" onclick="hit(2)"><span>2</span></div>
      <div id="3" class="boxes" onclick="hit(3)"><span>3</span></div>
      <div id="10" class="boxes" onclick="hit(10)"><span>10</span></div>
    </div>

    <div class="tables">
      <div id="6" class="boxes" onclick="hit(6)"><span>6</span></div>
      <div id="0" class="boxes" onclick="hit(0)"><span>0</span></div>
      <div id="1" class="boxes" onclick="hit(1)"><span>1</span></div>
      <div id="7" class="boxes" onclick="hit(7)"><span>7</span></div>
    </div>

    <div class="tables">
      <div id="9" class="boxes" onclick="hit(9)"><span>9</span></div>
      <div id="4" class="boxes" onclick="hit(4)"><span>4</span></div>
      <div id="5" class="boxes" onclick="hit(5)"><span>5</span></div>
      <div id="11" class="boxes" onclick="hit(11)"><span>11</span></div>
    </div>

    <div id="controls">
      <div>
        <button id="newTryBtn" class="btn" onclick="backToBeginning()">New Try</button>
      </div>
      <div>
        <button id="hintBtn" class="btn" onclick="hint()">Need Hint</button>
      </div>
      <div>
        <button id="newGameBtn" class="btn" onclick="newGame()">START GAME</button>
      </div>
    </div>
  </div>

  <script>
  var menu = id("menu");
  var game = id("game");
  var guide = id("guide");
  var about = id("about");
  var level_selector = id("level_selector");

  function showMenu() {
    menu.className = "overlay_page";
    guide.className = "hidden_page";
    about.className = "hidden_page";
  }

  function showGuide() {
    guide.className = "overlay_page";
    menu.className = "hidden_page";
    about.className = "hidden_page";
  }

  function showAbout() {
    about.className = "overlay_page";
    menu.className = "hidden_page";
    guide.className = "hidden_page";
  }

  function showGame() {
    about.className = "hidden_page";
    menu.className = "hidden_page";
    guide.className = "hidden_page";
  }

  window.onload = init();

  function setLevel() {
    if (Number(level_selector.value)) {
      start_level = Number(level_selector.value);
      setText("level", "Level : " + start_level);
    }
  }

  </script>
</body>

</html>
